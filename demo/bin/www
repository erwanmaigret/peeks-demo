#!/usr/bin/env node

var app = require('../app');
var debug = require('debug')('demo:server');
var http = require('http');

// Get port from environment and store in Express.
var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

// Create HTTP server.
var server = http.createServer(app);

// Listen on provided port, on all network interfaces.
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

// Normalize a port into a number, string, or false.
function normalizePort(val) {
  var port = parseInt(val, 10);
  if (isNaN(port)) {
    // named pipe
    return val;
  }
  if (port >= 0) {
    // port number
    return port;
  }
  return false;
}

// Event listener for HTTP server "error" event.
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

// Event listener for HTTP server "listening" event.
function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

// WIP Proxy for CORS
//Create the server listening on port 8888
http.createServer(function(request, response) {
    //Log the URL for debugging etc.
    console.log(request.url);

    //Create a new http request with the data at hand
    var parsedURL = require("url").parse(request.url);
    var proxyRequest = http.request({
        port: request.port,
        host: request.headers["host"],
        method: request.method,
        headers: request.headers,
        path: parsedURL.pathname + (parsedURL.search ? parsedURL.search : "")
    })

    //When there is a response;
    proxyRequest.addListener("response", function (proxyResponse) {
        proxyResponse.on("data", function(chunk) {
            response.write(chunk, "binary");
        });

        //End the response
        proxyResponse.on("end", function() {
            response.end();
        });

        //Manipulate some headers - Here we repeat the original requests origin to the fake response
        if(request.headers["origin"]) {
            proxyResponse.headers["access-control-allow-origin"] = request.headers["origin"];
            //Set any other headers you need
            //proxyResponse.headers["access-control-allow-credentials"] = "true";
        }
        response.writeHead(proxyResponse.statusCode, proxyResponse.headers);
    });

    //return a 404 when the forwarded request throws an error
    proxyRequest.on("error", function(err) {
        response.statusCode = "404";
        response.end();
    });

    //Copy any data in the original request to the forwarded request
    request.addListener("data", function(chunk) {
        proxyRequest.write(chunk, "binary");
    });

    //End the proxy request
    request.addListener("end", function() {
        proxyRequest.end();
    });
}).listen(8888);
